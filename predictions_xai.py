import asyncio
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

##########
#Imports
##########
import streamlit as st
import pandas as pd
import numpy as np
import pickle

import plotly.express as px
import plotly.graph_objects as go

from evalml.model_understanding.prediction_explanations import explain_predictions

##########
#Streamlit setup
##########
st.set_page_config(page_title='Inteledge - Predi√ß√£o de Turnover - RH', page_icon="üî≠", layout="centered", initial_sidebar_state="auto", menu_items=None)

##########
#Functions for the predictions and for the page layout
##########
@st.cache(allow_output_mutation=True)
def get_pickles():
	df_sample_true, df_sample_false, df_min_max, df_cat_vars, logical_types = pickle.load(open('sample_pt.pkl', 'rb'))
	best_pipeline, expected_value = pickle.load(open('model_pt.pkl', 'rb'))
	
	df_sample_true = df_sample_true.sort_values(by='% certeza', ascending=False).round(2)
	df_sample_false = df_sample_false.sort_values(by='% certeza', ascending=False).round(2)
	
	cols = df_sample_true.drop('Previs√£o', axis=1).columns.tolist()
	df_sample_true['Nome'] = ['Mariana', 'Juan', 'Carlos', 'Patricia', 'Alexandra']
	df_sample_true['Sobrenome'] = ['Luz', 'Garcia', 'Perez', 'Zanella', 'Neves']
	df_sample_true = df_sample_true.head(5)[['Nome', 'Sobrenome'] + [cols[-1:] + cols[:-1]]]

	df_sample_false['Nome'] = ['Pedro', 'Georgina', 'Natalia', 'Thiago', 'Denise']
	df_sample_false['Sobrenome'] = ['Neto', 'Lima', 'Diaz', 'Batista', 'Garcez']
	df_sample_false = df_sample_false.head(5)[['Nome', 'Sobrenome'] + [cols[-1:] + cols[:-1]]]
	
	return best_pipeline, expected_value, df_sample_true, df_sample_false, df_min_max, df_cat_vars, logical_types

def plot_importances(best_pipeline, df):
	# predictions
	pred = best_pipeline.predict(df).values[0]
	pred = 'Pedir√° demiss√£o' if pred == 1 else 'N√£o pedir√° demiss√£o'
	pred_proba = best_pipeline.predict_proba(df).values[0]
	starting_value = expected_value*100

	df_plot = explain_predictions(pipeline=best_pipeline, input_features=df.reset_index(drop=True),
								y=None, top_k_features=len(df.columns), indices_to_explain=[0],
								include_explainer_values=True, output_format='dataframe')

	if np.argmax(pred_proba) == 1:
		df_plot['quantitative_explanation'] = df_plot['quantitative_explanation']*100
	else:
		starting_value = 100-starting_value
		df_plot['quantitative_explanation'] = df_plot['quantitative_explanation']*-100

	df_plot = df_plot.sort_values(by='quantitative_explanation')
	df_plot['Soma'] = starting_value+df_plot['quantitative_explanation'].cumsum()
	df_plot = df_plot.sort_values(by='quantitative_explanation')
	df_plot['Influencia para este resultado?'] = df_plot['quantitative_explanation']<0
	df_plot = df_plot.round(2)

	cols_to_rename = {'Sal√°rio em rela√ß√£o a outros com o mesmo cargo na equipe': 'Sal√°rio x outros na equipe',
					'Sal√°rio em rela√ß√£o a outros com o mesmo cargo no mercado': 'Sal√°rio x outros no mercado',
					'Quantidade de feedbacks nos √∫ltimos 12 meses': 'Qtd. feedbacks √∫lt. 12 meses',
					'Experi√™ncia do l√≠der neste cargo (em anos)': 'Experi√™ncia do l√≠der (anos)',
					'% salarial em rela√ß√£o √† m√©dia de mercado': '% sal√°rio x m√©dia de mercado',
					'Meses desde o √∫ltimo aumento ou pr√™mio': 'Meses desde √∫lt. aumento/pr√™mio',
					'Turnover da equipe nos √∫ltimos 12 meses': 'Turnover da equipe (12 meses)'}
	vals_to_rename = {'Entre em linha e acima do esperado': 'Em linha/acima do esperado'}
	df_plot = df_plot.replace(cols_to_rename)
	df = df.rename(columns=cols_to_rename).replace(vals_to_rename)

	col_names = []
	for col in df_plot['feature_names'].values:
		col_names.append(f'{col}<br><em>({df[col].values[0]})</em>')
        
	fig_xai = go.Figure(go.Waterfall(
		name='Proje√ß√£o',
		base=0,
		orientation="h",
		y=['Proje√ß√£o inicial'] + col_names + ['Final'],
		x=[starting_value] + df_plot['quantitative_explanation'].values.tolist() + [0],
		measure=['absolute'] + ['relative']*len(df_plot) + ['total'],
		text=[None] + [f'{x:.1f}%' for x in df_plot['Soma'].values] + [None],
		#textposition = "outside",
		connector = {"line":{"color":"rgb(63, 63, 63)"}},
	))

	fig_xai.update_xaxes(range=[max(0, df_plot['Soma'].min()-18),
								min(100, df_plot['Soma'].max()+18)])

	fig_xai.update_layout(
	title=f'Principais influenciadores para esta predi√ß√£o:<br>(<b>{pred}</b>, com {round(100*pred_proba.max(),1)}% de certeza)',
	showlegend = False,
	width=430,
	height=1400
	)

	return fig_xai, pred

##########
#Preparing the simulator
##########
# loading the predictive models
best_pipeline, expected_value, df_sample_true, df_sample_false, df_min_max, df_cat_vars, logical_types = get_pickles()

##########
#Section 1 - History
##########
col1, _, _ = st.columns(3)
with col1:
	st.image('inteledge.png')

st.title('Predi√ß√£o de Turnover - TI')
st.markdown('Aqui na inteledge desenvolvemos Intelig√™ncia Artificial de alta performance para resolver problemas em RH. Possu√≠mos conhecimento t√©cnico e cient√≠fico comprovado com uma experi√™ncia forjada no ambiente corporativo durante v√°rios anos para entregar aquilo que √© eficaz e que funciona com um forte embasamento te√≥rico. Aqui, demonstramos para voc√™ um exemplo de algoritmo que prev√™ o risco de sa√≠da de um profissional a partir da sua base hist√≥rica. Interessante, n√£o √©? Ficou interessado? Entre em contato conosco no @inteledge.lab no [Instagram](https://instagram.com/inteledge.lab) ou no [LinkedIn](https://www.linkedin.com/company/inteledge/)!')

st.write('Primeiramente, veja uma amostra de algumas previs√µes do algoritmo para uma base hist√≥rica. √â este o tipo de resultado que voc√™ ter√° acesso.')
st.header('√öltimas previs√µes do algoritmo')

st.write('Amostra de 5 pessoas com maior probabilidade de pedir demiss√£o:')
st.dataframe(df_sample_true)

st.write('Amostra de 5 pessoas com maior probabilidade de **n√£o** pedir demiss√£o:')
st.dataframe(df_sample_false)

##########
#Section 2 - Simulator
##########
st.header('Simulador de novos casos')
st.markdown('J√° pensou como seria simular novos cen√°rios **em tempo real**? Isto √© poss√≠vel aqui na inteledge. Fique √† vontade para testar abaixo novas possibilidades.')
st.write('De um ponto de vista de Ci√™ncia de Dados, nenhum algoritmo ser√° 100% correto todas as vezes. Por outro lado, sabendo como ele funciona e como ele chegou a uma determinada previs√£o nos d√° uma confian√ßa e transpar√™ncia essenciais. Entendemos que toda l√≥gica de uma IA deve ser transparente desde o come√ßo: n√£o pode existir uma caixa-preta para quem utiliza destes algoritmos para tomar decis√µes.')
col1, col2 = st.columns(2)

with col1:
	# variables 
	
	years_experience = st.slider('Anos de Experi√™ncia',
		int(df_min_max['Anos de Experi√™ncia']['min']), int(df_min_max['Anos de Experi√™ncia']['max']), int(df_sample_true['Anos de Experi√™ncia'].iloc[0]))
	
	performance_review = st.selectbox('Avalia√ß√£o de performance', df_cat_vars['Avalia√ß√£o de performance'])
		
	distance_work = st.slider('Dist√¢ncia do trabalho (km)',
		int(df_min_max['Dist√¢ncia do trabalho (km)']['min']), int(df_min_max['Dist√¢ncia do trabalho (km)']['max']),
		int(df_sample_true['Dist√¢ncia do trabalho (km)'].iloc[0]))
	
	job_level = st.selectbox('Cargo', df_cat_vars['Cargo'])
	
	overtime = st.selectbox('Est√° fazendo muitas horas extras?', df_cat_vars['Est√° fazendo muitas horas extras?'])
	
	marital_status = st.selectbox('Estado civil', df_cat_vars['Estado civil'])
	
	leader_experience = st.slider('Experi√™ncia do l√≠der neste cargo (em anos)',
		int(df_min_max['Experi√™ncia do l√≠der neste cargo (em anos)']['min']), int(df_min_max['Experi√™ncia do l√≠der neste cargo (em anos)']['max']), int(df_sample_true['Experi√™ncia do l√≠der neste cargo (em anos)'].iloc[0]))
	
	education = st.selectbox('Forma√ß√£o', df_cat_vars['Forma√ß√£o'])
	
	gender = st.selectbox('G√™nero', df_cat_vars['G√™nero'])
		
	age = st.slider('Idade',
		int(df_min_max['Idade']['min']), int(df_min_max['Idade']['max']), int(df_sample_true['Idade'].iloc[0]))
	
	months_last_adjustment = st.slider('Meses desde o √∫ltimo aumento ou pr√™mio',
		int(df_min_max['Meses desde o √∫ltimo aumento ou pr√™mio']['min']), int(df_min_max['Meses desde o √∫ltimo aumento ou pr√™mio']['max']), int(df_sample_true['Meses desde o √∫ltimo aumento ou pr√™mio'].iloc[0]))
		
	pay_alimony = st.selectbox('Paga pens√£o?', df_cat_vars['Paga pens√£o?'])	
	
	leader_performance = st.selectbox('Performance do l√≠der', df_cat_vars['Performance do l√≠der'])
	
	previous_position = st.selectbox('Posi√ß√£o na √∫ltima empresa', df_cat_vars['Posi√ß√£o na √∫ltima empresa'])
	
	feedbacks_last_12_months = st.selectbox('Quantidade de feedbacks nos √∫ltimos 12 meses', df_cat_vars['Quantidade de feedbacks nos √∫ltimos 12 meses'])
	
	salary_against_internal = st.selectbox('Sal√°rio em rela√ß√£o a outros com o mesmo cargo na equipe', df_cat_vars['Sal√°rio em rela√ß√£o a outros com o mesmo cargo na equipe'])
	
	salary_against_external = st.selectbox('Sal√°rio em rela√ß√£o a outros com o mesmo cargo no mercado', df_cat_vars['Sal√°rio em rela√ß√£o a outros com o mesmo cargo no mercado'])
	
	years_in_company = st.slider('Tempo de empresa',
		int(df_min_max['Tempo de empresa']['min']), int(df_min_max['Tempo de empresa']['max']), int(df_sample_true['Tempo de empresa'].iloc[0]))
	
	years_in_position = st.slider('Tempo no cargo',
		int(df_min_max['Tempo no cargo']['min']), int(df_min_max['Tempo no cargo']['max']), int(df_sample_true['Tempo no cargo'].iloc[0]))
	
	team_turnover = st.selectbox('Turnover da equipe nos √∫ltimos 12 meses', df_cat_vars['Turnover da equipe nos √∫ltimos 12 meses'])
		
	last_salary_adjustment_against_market = st.slider('% salarial em rela√ß√£o √† m√©dia de mercado',
		int(df_min_max['% salarial em rela√ß√£o √† m√©dia de mercado']['min']), int(df_min_max['% salarial em rela√ß√£o √† m√©dia de mercado']['max']),
		int(df_sample_true['% salarial em rela√ß√£o √† m√©dia de mercado'].iloc[0]))
	
	last_salary_adjustment_percentage = st.slider('% do √∫ltimo reajuste salarial',
		int(df_min_max['% do √∫ltimo reajuste salarial']['min']), int(df_min_max['% do √∫ltimo reajuste salarial']['max']),
		int(df_sample_true['% do √∫ltimo reajuste salarial'].iloc[0]))

with col2:
	# inference
	df_inference = pd.DataFrame([[age, pay_alimony, distance_work,
		previous_position, education, performance_review,
		gender, overtime,
		salary_against_internal, job_level, leader_performance, marital_status, 
		last_salary_adjustment_against_market, team_turnover,
		last_salary_adjustment_percentage, salary_against_external,
		years_experience, feedbacks_last_12_months, years_in_company, years_in_position,
		months_last_adjustment, leader_experience]],
		columns=['Idade', 'Paga pens√£o?', 'Dist√¢ncia do trabalho (km)',
	   'Posi√ß√£o na √∫ltima empresa', 'Forma√ß√£o', 'Avalia√ß√£o de performance',
	   'G√™nero', 'Est√° fazendo muitas horas extras?',
	   'Sal√°rio em rela√ß√£o a outros com o mesmo cargo na equipe', 'Cargo',
	   'Performance do l√≠der', 'Estado civil',
	   '% salarial em rela√ß√£o √† m√©dia de mercado',
	   'Turnover da equipe nos √∫ltimos 12 meses',
	   '% do √∫ltimo reajuste salarial',
	   'Sal√°rio em rela√ß√£o a outros com o mesmo cargo no mercado',
	   'Anos de Experi√™ncia', 'Quantidade de feedbacks nos √∫ltimos 12 meses',
	   'Tempo de empresa', 'Tempo no cargo',
	   'Meses desde o √∫ltimo aumento ou pr√™mio',
	   'Experi√™ncia do l√≠der neste cargo (em anos)'])

	df_inference = df_inference[logical_types.keys()]
	df_inference.ww.init()
	df_inference.ww.set_types(logical_types=logical_types)

	fig_xai, predicao = plot_importances(best_pipeline, df_inference)
	st.plotly_chart(fig_xai)
    
st.markdown('Siga-nos no [Instagram](https://instagram.com/inteledge.lab) e no [LinkedIn](https://www.linkedin.com/company/inteledge/)!')
